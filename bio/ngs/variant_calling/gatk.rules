"""
GATK haplotype calling using the workflow suggested in 
https://www.broadinstitute.org/gatk/guide/topic?name=methods#methods3893

Expects a global variable CONFIG (e.g. parsed from json) of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced.

{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "dbsnp": "path/to/dbsnp.vcf"
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
"""


__author__ "Johannes KÃ¶ster"
__license__ = "MIT"


rule gatk_haplotype_caller:
    input:
        ref=_get_ref,
        bams=_get_bams
    output:
        "variant_calling/{reference}/{sample}.gvcf"
    run:
        bams = gatk_multi_arg("-I", input.bams)
        shell(
            "gatk -T HaplotypeCaller -R {input.ref} {bams} "
            "--emitRefConfidence GVCF --variant_index_type LINEAR "
            "--dbsnp {CONFIG[dbsnp]} "
            "--variant_index_parameter 128000 -o {output}")


rule gatk_genotyping:
    input:
        ref=_get_ref,
        gvcfs=expand("variant_calling/{{reference}}/{sample}.gvcf", sample=CONFIG["samples"])
    output:
        "variant_calling/{reference}/all.calls.vcf"
    run:
        gvcfs = _gatk_multi_arg("--variant", input.gvcfs)
        shell(
            "gatk -T GenotypeGVCFs {gvcfs} "
            "--dbsnp {CONFIG[dbsnp]} -o {output}")


def _get_ref(wildcards):
    return CONFIG["references"][wildcards.reference]


def _get_bams(wildcards):
    return expand(
        "mapping/{reference}/{unit}.sorted.realigned.recalibrated.bam",
        reference=wildcards.reference,
        unit=CONFIG["samples"][wildcards.sample])


def _gatk_multi_arg(flag, files):
    return flag + flag.join(files)
