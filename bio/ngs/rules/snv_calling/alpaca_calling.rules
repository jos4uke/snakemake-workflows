# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
ALPACA SNV calling.

For usage, include this in your workflow.

Expects a global variable CONFIG (e.g. parsed from json) of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced.
The heterozygosity parameter shows the default values for homo sapiens.

{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "known_variants": {
        "dbsnp": "path/to/dbsnp.vcf"
    },
    "ploidy": 2,
    "heterozygosity": 0.001,
    "alpaca_queries": {
        "somatic": "A - B"
    }
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"


def _sample_units(pattern):
    def apply(wildcards):
        return expand(
            pattern, reference=wildcards.reference,
            unit=CONFIG["samples"][wildcards.sample])
    return apply


rule alpaca_index:
    input:
        "snv_calling/done/init.done",
        _sample_units("mapping/{reference}/units/{unit}.sorted.bam.bai"),
        bams=_sample_units("mapping/{reference}/units/{unit}.sorted.bam")
    output:
        "snv_calling/{reference}/{sample}.index.hdf5"
    threads: 8
    resources: gpu=1
    shell:
        "alpaca --dev gpu --threads {threads} index "
        "--sample-name {wildcards.sample} {input.bams} {output}"


rule alpaca_combine:
    input:
        expand(
            "snv_calling/{reference}/{sample}.index.hdf5",
            sample=CONFIG["samples"])
    output:
        "snv_calling/{reference}/index.hdf5"
    shell:
        "alpaca combine {input} {output}"


rule alpaca_call:
    input:
        "snv_calling/{reference}/index.hdf5"
    output:
        "snv_calling/{reference}/{query}.{min_qual}.{max_strandbias}.vcf"
    params:
        query=lambda wildcards: CONFIG["alpaca_queries"][wildcards.query]
    resources: gpu=1
    shell:
        "alpaca --dev gpu call --min-qual {qual} "
        "--max-strand-bias {strandbias} "
        "--heterozygosity {CONFIG[heterozygosity]} "
        "{input} {params.query} > {output}"
