# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Variant calling with Freebayes:
https://github.com/ekg/freebayes

Needs the following tools available in PATH:
freebayes
vcf-concat from vcftools

For usage, include this in your workflow.

Expects a global variable CONFIG (e.g. parsed from json) of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced.
The heterozygosity parameters show the default values for homo sapiens.


{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "ploidy": 2,
    "heterozygosity": 0.001
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"


def _get_ref(wildcards):
    return CONFIG["references"][wildcards.reference]


def _get_chroms(pattern):
    def apply(wildcards):
        ref = _get_ref(wildcards)
        return expand(
            pattern,
            reference=wildcards.reference,
            chrom=[
                record.split(None, 1)[0][1:].decode()
                for record in shell("grep '>' {ref}", iterable=True)
            ])
    return apply


def _get_units(pattern):
    def apply(wildcards):
        return expand(
            pattern, reference=wildcards.reference,
            unit=[
                unit for sample in CONFIG["samples"].values()
                for unit in sample
            ])
    return apply


rule freebayes:
    input:
        _get_units("mapping/{reference}/units/{unit}.sorted.bam.bai"),
        ref=_get_ref,
        bams=_get_units("mapping/{reference}/units/{unit}.sorted.bam")
    output:
        "variant_calling/{reference}/all.{chrom}.vcf"
    params:
        custom=CONFIG.get("params_freebayes", "")
    log:
        "variant_calling/log/{reference}/all.{chrom}.genotype.log"
    threads: 8
    shell:
        "freebayes -r {wildcards.chrom} "
        "--ploidy {CONFIG[ploidy]} --fasta-reference {input.ref} "
        "--theta {CONFIG[heterozygosity]} {params.custom} "
        "{input.bams} > {output}"


rule freebayes_merge:
    input:
        _get_chroms("variant_calling/{reference}/all.{chrom}.vcf")
    output:
        "variant_calling/{reference}/all.vcf"
    shell:
        "vcf-concat {input} > {output}"
