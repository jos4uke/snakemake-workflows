# vim: syntax=python expandtab


"""
GATK haplotype calling using the workflow suggested in 
https://www.broadinstitute.org/gatk/guide/topic?name=methods#methods3893
Needs at least GATK 3.0, available in your PATH as "gatk".

For usage, include this in your workflow.

Expects a global variable CONFIG (e.g. parsed from json) of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced.
The heterozygosity parameters show the default values for homo sapiens.

{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "known_variants": {
        "dbsnp": "path/to/dbsnp.vcf"
    },
    "heterozygosity": 0.001,
    "indel_heterozygosity": 1.25E-4
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
"""


__author__ = "Johannes KÃ¶ster"
__license__ = "MIT"


def _get_ref(wildcards):
    return CONFIG["references"][wildcards.reference]


def _expand_mapping(pattern, wildcards):
    return expand(
        pattern,
        reference=wildcards.reference,
        unit=CONFIG["samples"][wildcards.sample])


def _get_bams(wildcards):
    return _expand_mapping(
        "mapping/{reference}/units/{unit}.sorted.realigned.recalibrated.bam",
        wildcards)


def _get_bais(wildcards):
    return _expand_mapping(
        "mapping/{reference}/units/{unit}.sorted.realigned.recalibrated.bam.bai",
        wildcards)


def _gatk_multi_arg(flag, files):
    flag += " "
    return flag + flag.join(files)


rule gatk_haplotype_caller:
    input:
        _get_bais,
        ref=_get_ref,
        bams=_get_bams
    output:
        "variant_calling/{reference}/{sample}.gvcf"
    params:
        custom=CONFIG.get("params_gatk", "")
    log:
        "variant_calling/log/{reference}/{sample}.genotype_info.log"
    threads: 8
    run:
        bams = _gatk_multi_arg("-I", input.bams)
        shell(
            "gatk -T HaplotypeCaller -R {input.ref} {bams} {params.custom} "
            "--emitRefConfidence GVCF --variant_index_type LINEAR "
            "--heterozygosity {CONFIG[heterozygosity]} "
            "--indel_heterozygosity {CONFIG[indel_heterozygosity]} "
            "--dbsnp {CONFIG[known_variants][dbsnp]} -nct {threads} "
            "--variant_index_parameter 128000 -o {output} >& {log}")


rule gatk_genotyping:
    input:
        ref=_get_ref,
        gvcfs=expand("variant_calling/{{reference}}/{sample}.gvcf", sample=CONFIG["samples"])
    output:
        "variant_calling/{reference}/all.vcf"
    params:
        custom=CONFIG.get("params_gatk", "")
    log:
        "variant_calling/log/{reference}/all.genotype.log"
    threads: 8
    run:
        gvcfs = _gatk_multi_arg("--variant", input.gvcfs)
        shell(
            "gatk -T GenotypeGVCFs {gvcfs} -nt {threads} {params.custom} "
            "--dbsnp {CONFIG[known_variants][dbsnp]} -o {output} >& {log}")
